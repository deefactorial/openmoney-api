---
swagger: "2.0"
info:
  description: "Openmoney API"
  version: "2.0.0"
  title: "Openmoney API"
  termsOfService: "http://openmoney.cc/index.php?page=terms"
  contact:
    name: "Openmoney Development Team"
    url: "http://openmoney.cc"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0"
host: "deefactorial.proudleo.com"
basePath: "/V2"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
- "text/html"
paths:
  /access_token:
    post:
      tags:
      - "auth"
      description: "Get an access token"
      operationId: "accessTokenPost"
      parameters:
      - in: "body"
        name: "access_token_request"
        description: "Challange token from authorize response decrypted with users\
          \ private key."
        required: true
        schema:
          $ref: "#/definitions/access_token_request"
      responses:
        200:
          description: "access token"
          schema:
            $ref: "#/definitions/access_token_response"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-swagger-router-controller: "Auth"
  /authorize:
    post:
      tags:
      - "auth"
      description: "authroize a user"
      operationId: "authorizePost"
      parameters:
      - in: "body"
        name: "authorize_request"
        description: "The Authorization Request"
        required: true
        schema:
          $ref: "#/definitions/authorize_request"
      responses:
        200:
          description: "authorize response"
          schema:
            $ref: "#/definitions/authorize_response"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-swagger-router-controller: "Auth"
  /discovery/accounts:
    get:
      tags:
      - "accounts"
      description: "Discover other users accounts by naming them, this is how you\
        \ add accounts to make payments to."
      operationId: "discoveryAccountsGet"
      parameters:
      - name: "account"
        in: "query"
        description: "account name"
        required: true
        type: "string"
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      - name: "account_space"
        in: "query"
        description: "account space"
        required: true
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      - name: "currency"
        in: "query"
        description: "currency"
        required: true
        type: "string"
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      - name: "currency_space"
        in: "query"
        description: "currency space"
        required: true
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      - name: "publicKey"
        in: "query"
        description: "Accounts public Key"
        required: false
        type: "string"
        pattern: "^-----BEGIN PUBLIC KEY-----[A-Za-z0-9/\\+=\\s]*-----END PUBLIC KEY-----$"
      responses:
        200:
          description: "Lookup Results"
          schema:
            $ref: "#/definitions/accounts"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:users"
        - "read:accounts"
      - openmoneyImplicit:
        - "read:users"
        - "read:accounts"
      - internalApiKey: []
      x-swagger-router-controller: "Accounts"
  /discovery/currencies:
    get:
      tags:
      - "currencies"
      description: "Discover other users currencies"
      operationId: "discoveryCurrenciesGet"
      parameters:
      - name: "currency"
        in: "query"
        description: "currency"
        required: true
        type: "string"
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      - name: "currency_space"
        in: "query"
        description: "currency space"
        required: true
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      responses:
        200:
          description: "Lookup Results"
          schema:
            $ref: "#/definitions/currencies"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:users"
        - "read:currencies"
      - openmoneyImplicit:
        - "read:users"
        - "read:currencies"
      - internalApiKey: []
      x-swagger-router-controller: "Currencies"
  /discovery/spaces:
    get:
      tags:
      - "spaces"
      description: "Discover another users space"
      operationId: "discoverySpacesGet"
      parameters:
      - name: "space"
        in: "query"
        description: "space"
        required: true
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]$"
      responses:
        200:
          description: "Lookup Results"
          schema:
            $ref: "#/definitions/spaces"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:users"
        - "read:spaces"
      - openmoneyImplicit:
        - "read:users"
        - "read:spaces"
      - internalApiKey: []
      x-swagger-router-controller: "Spaces"
  /oauth/access_token:
    post:
      tags:
      - "auth"
      summary: "Gets an authorization token"
      description: "Gets an authorization token"
      operationId: "oauthAccessTokenPost"
      parameters:
      - in: "body"
        name: "access_token_request"
        description: "Acess Token Request Object"
        required: true
        schema:
          $ref: "#/definitions/access_token_request"
      responses:
        200:
          description: "Acess Token is returned"
          schema:
            $ref: "#/definitions/access_token_response"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-swagger-router-controller: "Auth"
  /oauth/application:
    post:
      tags:
      - "auth"
      description: "Existing user Registers an application with the openmoney network."
      operationId: "oauthApplicationPost"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "application"
        description: "Application Object"
        required: true
        schema:
          $ref: "#/definitions/application_request"
      responses:
        200:
          description: "Application Response"
          schema:
            $ref: "#/definitions/application_response"
      security:
      - openmoneyImplicit:
        - "read:users"
        - "write:users"
      - internalApiKey: []
      x-swagger-router-controller: "Auth"
  /oauth/authorize:
    get:
      tags:
      - "auth"
      summary: "Authroize"
      description: "Authorizes a user on the openmoney network"
      operationId: "oauthAuthorizeGet"
      produces:
      - "text/html"
      parameters:
      - name: "application_id"
        in: "query"
        description: "Application ID received during registration"
        required: true
        type: "string"
        pattern: "^-----BEGIN PUBLIC KEY-----[A-Za-z0-9/\\+=\\s]*-----END PUBLIC KEY-----$"
      - name: "redirect_uri"
        in: "query"
        description: "A uri to redirect user after authorization"
        required: false
        type: "string"
        format: "url"
      - name: "scope"
        in: "query"
        description: "A comma separated list of scopes. If not provided, scope defaults\
          \ to an empty list of scopes for users that don’t have a valid token for\
          \ the app. For users who do already have a valid token for the app, the\
          \ user won’t be shown the OAuth authorization page with the list of scopes.\
          \ Instead, this step of the flow will automatically complete with the same\
          \ scopes that were used last time the user completed the flow."
        required: false
        type: "array"
        items:
          type: "string"
          minLength: 5
          maxLength: 32
        collectionFormat: "multi"
      - name: "cors_token"
        in: "query"
        description: "An unguessable random string. It is used to protect against\
          \ cross-site request forgery attacks."
        required: true
        type: "string"
        pattern: "^[A-Za-z0-9]*$"
      responses:
        200:
          description: "Authorization Dialog On Openmoney Cloud Webserver"
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-swagger-router-controller: "Auth"
  /register:
    post:
      tags:
      - "auth"
      description: "Register a user on the system"
      operationId: "registerPost"
      parameters:
      - in: "body"
        name: "register_request"
        description: "Registration Request"
        required: true
        schema:
          $ref: "#/definitions/register_request"
      responses:
        200:
          description: "Registration Success"
          schema:
            $ref: "#/definitions/register_response"
          examples:
            application/json:
              users:
                id: "ItROV0om19Qs5MQV3AcT7AxVn6gS2nLrfXeEHNPYYJA=users~testuser"
                username: "testuser"
                publicKey: "-----BEGIN PUBLIC KEY----- MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEArnvNySmLi+TpYvBkwGVm\
                  \ gJKuREExb8xMgmmJVFkgnnlm1+SpAXUcBrBdt3HHGiSjJky/ur0fSiQAQZS5GvC3\
                  \ 3j6U02uTt1B4vHSOM7v0wAWH6jYra20WHjRZr7EggIVe40yaOPFQnoBWTrbmeqdN\
                  \ 5FDNdcpwqCyRQTlwHqwzDyWzzdXvAwefjVeFLQFMgIJKuU1sjQuO6ntwWyWr1c+g\
                  \ tkoWjvh/wKqKddd0OG1t9acMZpJskgYDFbZ+isHrVGB1kJMO5cp75wbrOVCRKZP5\
                  \ xOUdSMvrjz4WPnbTUELhEN7OATnTEGbu3Zro7DVpFXsIg2mJ1uiQAvNBZgh65/ZF\
                  \ ZHTIDJcdQ20Zf2c4cluLaUjHhraq0AlHd7ph+gYIOSL8L5/gK1AOTEGPpuoDbuDq\
                  \ Rc+5e/5xP9pblCnTdAV+f28ld20SnKQARryeBYpOYnLwvORqj7cVKIjOyp99Wsqi\
                  \ DBH/S5BF+G1EWImf5xwP4oxW6TwzhpK1TYJFgOaYf8gsxnR261QrN9yK8VXX14AQ\
                  \ 9lI+JLqRs8AyECURRB9oiLuvSLdIbiQR+/5cyoIFzGte7P/vpLqRX+QvAQUAOMiY\
                  \ +Vn8R+rmsUJEwCGAJne3U0WUp+9oOb0S5Vj0mF4nmCoAsdk8aPPuBQ6O9ughHu7b\
                  \ 6hMwrrAMI0s8YSN543xCXSsCAwEAAQ== -----END PUBLIC KEY-----"
                email: "testuser@openmoney.cc"
                email_notifications: true
        default:
          description: "Error"
          schema:
            $ref: "#/definitions/ErrorModel"
      x-swagger-router-controller: "Auth"
    options:
      tags:
      - "auth"
      operationId: "registerOptions"
      produces:
      - "text/html"
      parameters: []
      responses:
        default:
          description: "CORS headers for all operations"
          schema:
            $ref: "#/definitions/options"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
              default: "http://editor.swagger.io"
            Access-Control-Allow-Headers:
              type: "string"
              default: "Origin, X-Requested-With, Content-Type, Accept"
      x-swagger-router-controller: "Auth"
  /sync/accounts:
    get:
      tags:
      - "accounts"
      description: "List accounts"
      operationId: "syncAccountsGet"
      parameters:
      - name: "account"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      - name: "account_space"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      - name: "currency"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      - name: "currency_space"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      responses:
        200:
          description: "List of accounts"
          schema:
            $ref: "#/definitions/accounts_list"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:accounts"
      - openmoneyImplicit:
        - "read:accounts"
      - internalApiKey: []
      x-swagger-router-controller: "Accounts"
    post:
      tags:
      - "accounts"
      description: "create an account"
      operationId: "syncAccountsPost"
      parameters:
      - in: "body"
        name: "create_request"
        required: false
        schema:
          $ref: "#/definitions/accounts"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/create_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:accounts"
      - openmoneyImplicit:
        - "write:accounts"
      - internalApiKey: []
      x-swagger-router-controller: "Accounts"
  /sync/accounts/{id}:
    get:
      tags:
      - "accounts"
      description: "Get an account by id"
      operationId: "syncAccountsIdGet"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"accounts,\" then acocunts name followed by\
          \ accounts space then \",\" then currency name followed by currency space"
        required: true
        type: "string"
        pattern: "^accounts,[A-Za-z0-9\\.\\-\\_]+,[A-Za-z0-9\\.]+$"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/accounts_get"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:accounts"
      - openmoneyImplicit:
        - "read:accounts"
      - internalApiKey: []
      x-swagger-router-controller: "Accounts"
    put:
      tags:
      - "accounts"
      description: "Update account"
      operationId: "syncAccountsIdPut"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"accounts,\" then acocunts name followed by\
          \ accounts space then \",\" then currency name followed by currency space"
        required: true
        type: "string"
        pattern: "^accounts,[A-Za-z0-9\\.\\-\\_]+,[A-Za-z0-9\\.]+$"
      - name: "rev"
        in: "query"
        description: "Revision identifier of the parent revision the new one should\
          \ replace."
        required: false
        type: "string"
      - in: "body"
        name: "accounts"
        required: false
        schema:
          $ref: "#/definitions/accounts"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/create_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:accounts"
      - openmoneyImplicit:
        - "write:accounts"
      - internalApiKey: []
      x-swagger-router-controller: "Accounts"
    delete:
      tags:
      - "accounts"
      description: "Delete a account"
      operationId: "syncAccountsDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"accounts,\" then acocunts name followed by\
          \ accounts space then \",\" then currency name followed by currency space"
        required: true
        type: "string"
        pattern: "^accounts,[A-Za-z0-9\\.\\-\\_]+,[A-Za-z0-9\\.]+$"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/delete_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:accounts"
      - openmoneyImplicit:
        - "write:accounts"
      - internalApiKey: []
      x-swagger-router-controller: "Accounts"
  /sync/currencies:
    get:
      tags:
      - "currencies"
      description: "List currencies, filter by currency or currency_space"
      operationId: "syncCurrenciesGet"
      parameters:
      - name: "currency"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      - name: "currency_space"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      responses:
        200:
          description: "List of currencies"
          schema:
            $ref: "#/definitions/currencies_list"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:currencies"
      - openmoneyImplicit:
        - "read:currencies"
      - internalApiKey: []
      x-swagger-router-controller: "Currencies"
    post:
      tags:
      - "currencies"
      description: "Create a currency"
      operationId: "syncCurrenciesPost"
      parameters:
      - in: "body"
        name: "create_request"
        required: false
        schema:
          $ref: "#/definitions/currencies"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/create_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:currencies"
      - openmoneyImplicit:
        - "write:currencies"
      - internalApiKey: []
      x-swagger-router-controller: "Currencies"
  /sync/currencies/{id}:
    get:
      tags:
      - "currencies"
      description: "Get a currency by id"
      operationId: "syncCurrenciesIdGet"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"currencies,\" then currency name followed by\
          \ currency space"
        required: true
        type: "string"
        pattern: "^currencies,[A-Za-z0-9\\.\\-\\_]+$"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/currencies_get"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:currencies"
      - openmoneyImplicit:
        - "read:currencies"
      - internalApiKey: []
      x-swagger-router-controller: "Currencies"
    put:
      tags:
      - "currencies"
      description: "Update Currency"
      operationId: "syncCurrenciesIdPut"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"currencies,\" then currency name followed by\
          \ currency space"
        required: true
        type: "string"
        pattern: "^currencies,[A-Za-z0-9\\.\\-\\_]+$"
      - name: "rev"
        in: "query"
        description: "Revision identifier of the parent revision the new one should\
          \ replace."
        required: false
        type: "string"
      - in: "body"
        name: "currencies"
        required: false
        schema:
          $ref: "#/definitions/currencies"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/create_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:currencies"
      - openmoneyImplicit:
        - "write:currencies"
      - internalApiKey: []
      x-swagger-router-controller: "Currencies"
    delete:
      tags:
      - "currencies"
      description: "Delete a currency"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"currencies,\" then currency name followed by\
          \ currency space"
        required: true
        type: "string"
        pattern: "^currencies,[A-Za-z0-9\\.\\-\\_]+$"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/delete_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:currencies"
      - openmoneyImplicit:
        - "write:currencies"
      - internalApiKey: []
  /sync/journals:
    get:
      tags:
      - "journals"
      description: "List Journal Entries"
      operationId: "syncJournalsGet"
      parameters:
      - name: "account"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      - name: "account_space"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      - name: "currency"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      - name: "currency_space"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      - name: "offset"
        in: "query"
        required: false
        type: "integer"
        minimum: 0.0
        format: "int32"
      - name: "range"
        in: "query"
        required: false
        type: "integer"
        minimum: 5.0
        format: "int32"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/journals_list"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:journals"
      - openmoneyImplicit:
        - "read:journals"
      - internalApiKey: []
      x-swagger-router-controller: "Journals"
    post:
      tags:
      - "journals"
      description: "Create a journal entry"
      operationId: "syncJournalsPost"
      parameters:
      - in: "body"
        name: "create_request"
        required: false
        schema:
          $ref: "#/definitions/journals"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/create_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:journals"
      - openmoneyImplicit:
        - "write:journals"
      - internalApiKey: []
      x-swagger-router-controller: "Journals"
  /sync/journals/{id}:
    get:
      tags:
      - "journals"
      description: "Get Journal by id"
      operationId: "syncJournalsIdGet"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"journals,\" then from account name followed\
          \ by account space then \",\" then to account name followed by account space\
          \ then \",\" then currency name followed by currency space then \",\" then\
          \ unix timestamp (since epoch) "
        required: true
        type: "string"
        pattern: "^journals,[A-Za-z0-9\\.\\-\\_]+,[A-Za-z0-9\\.\\-\\_]+,[A-Za-z0-9\\\
          .\\-\\_]+,[0-9]+$"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/journals_get"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:journals"
      - openmoneyImplicit:
        - "write:journals"
      - internalApiKey: []
      x-swagger-router-controller: "Journals"
  /sync/spaces:
    get:
      tags:
      - "spaces"
      description: "List of spaces"
      operationId: "syncSpacesGet"
      parameters:
      - name: "space"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      - name: "space_parent"
        in: "query"
        required: false
        type: "string"
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      responses:
        200:
          description: "List of spaces"
          schema:
            $ref: "#/definitions/spaces_list"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:spaces"
      - openmoneyImplicit:
        - "read:spaces"
      - internalApiKey: []
      x-swagger-router-controller: "Spaces"
    post:
      tags:
      - "spaces"
      description: "Create New Spaces"
      operationId: "syncSpacesPost"
      parameters:
      - in: "body"
        name: "create_request"
        required: false
        schema:
          $ref: "#/definitions/spaces"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/create_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:spaces"
      - openmoneyImplicit:
        - "write:spaces"
      - internalApiKey: []
      x-swagger-router-controller: "Spaces"
  /sync/spaces/{id}:
    get:
      tags:
      - "spaces"
      description: "Get a space by id"
      operationId: "syncSpacesIdGet"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"currencies,\" then currency name followed by\
          \ currency space"
        required: true
        type: "string"
        pattern: "^spaces,[A-Za-z0-9\\.\\-\\_]+$"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/spaces_get"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "read:spaces"
      - openmoneyImplicit:
        - "read:spaces"
      - internalApiKey: []
      x-swagger-router-controller: "Spaces"
    put:
      tags:
      - "spaces"
      description: "Update Space"
      operationId: "syncSpacesIdPut"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"currencies,\" then currency name followed by\
          \ currency space"
        required: true
        type: "string"
        pattern: "^spaces,[A-Za-z0-9._\\-]+$"
      - name: "rev"
        in: "query"
        description: "Revision identifier of the parent revision the new one should\
          \ replace."
        required: false
        type: "string"
      - in: "body"
        name: "space"
        required: false
        schema:
          $ref: "#/definitions/spaces"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/create_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:spaces"
      - openmoneyImplicit:
        - "write:spaces"
      x-swagger-router-controller: "Spaces"
    delete:
      tags:
      - "spaces"
      description: "Remove a space"
      operationId: "syncSpacesIdDelete"
      parameters:
      - name: "id"
        in: "path"
        description: "id starts with \"currencies,\" then currency name followed by\
          \ currency space"
        required: true
        type: "string"
        pattern: "^spaces,[A-Za-z0-9\\.\\-\\_]+$"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/delete_response"
        default:
          description: "error payload"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - openmoneyApplication:
        - "write:spaces"
      - openmoneyImplicit:
        - "write:spaces"
      - internalApiKey: []
      x-swagger-router-controller: "Spaces"
securityDefinitions:
  openmoneyImplicit:
    type: "oauth2"
    authorizationUrl: "http://deefactorial.proudleo.com/V2/authroize"
    tokenUrl: "https://deefactorial.proudleo.com/V2/access_token"
    flow: "accessCode"
    scopes:
      read:users: "Read access to users"
      write:users: "Write access to users"
      read:accounts: "Read access to accounts"
      write:accounts: "Write access to accounts"
      read:currencies: "Read access to currencies"
      write:currencies: "Write access to currencies"
      read:spaces: "Read access to spaces"
      write:spaces: "Write access to spaces"
      read:journals: "Read access to journals"
      write:journals: "Write access  to journals"
  internalApiKey:
    type: "apiKey"
    name: "access_token"
    in: "header"
  openmoneyApplication:
    type: "oauth2"
    authorizationUrl: "https://deefactorial.proudleo.com/V2/oauth/authorize"
    tokenUrl: "https://deefactorial.proudleo.com/V2/oauth/access_token"
    flow: "accessCode"
    scopes:
      read:users: "Read access to users"
      write:users: "Write access to users"
      read:accounts: "Read access to accounts"
      write:accounts: "Write access to accounts"
      read:currencies: "Read access to currencies"
      write:currencies: "Write access to currencies"
      read:spaces: "Read access to spaces"
      write:spaces: "Write access to spaces"
      read:journals: "Read access to journals"
      write:journals: "Write access  to journals"
definitions:
  spaces_list:
    type: "array"
    items:
      $ref: "#/definitions/spaces_get"
  currencies_list:
    type: "array"
    items:
      $ref: "#/definitions/currencies_get"
  accounts_list:
    type: "array"
    items:
      $ref: "#/definitions/accounts_get"
  journals_list:
    type: "array"
    items:
      $ref: "#/definitions/journals_get"
  journals_get:
    allOf:
    - $ref: "#/definitions/get_response"
    - $ref: "#/definitions/journals"
  spaces_get:
    allOf:
    - $ref: "#/definitions/get_response"
    - $ref: "#/definitions/spaces"
  currencies_get:
    allOf:
    - $ref: "#/definitions/get_response"
    - $ref: "#/definitions/currencies"
  accounts_get:
    allOf:
    - $ref: "#/definitions/get_response"
    - $ref: "#/definitions/accounts"
  users_get:
    allOf:
    - $ref: "#/definitions/get_response"
    - $ref: "#/definitions/users"
  delete_response:
    type: "object"
    required:
    - "id"
    - "ok"
    properties:
      id:
        type: "string"
      ok:
        type: "boolean"
  get_response:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
  create_response:
    type: "object"
    required:
    - "id"
    - "ok"
    properties:
      id:
        type: "string"
      ok:
        type: "boolean"
  users:
    type: "object"
    required:
    - "publicKey"
    - "username"
    properties:
      username:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      publicKey:
        type: "string"
        minLength: 266
        maxLength: 800
        pattern: "^-----BEGIN PUBLIC KEY-----[A-Za-z0-9/\\+=\\s]*-----END PUBLIC KEY-----$"
      email:
        type: "string"
        format: "email"
        maxLength: 255
        pattern: "^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\\
          .[a-z]{2})?)$"
      email_notifications:
        type: "boolean"
  accounts:
    type: "object"
    required:
    - "account"
    - "account_space"
    - "currency"
    - "currency_space"
    - "stewards"
    properties:
      account:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      account_space:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      currency:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      currency_space:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      stewards:
        type: "array"
        items:
          $ref: "#/definitions/users"
      publicKey:
        type: "string"
        format: "password"
        minLength: 266
        maxLength: 800
        pattern: "^-----BEGIN PUBLIC KEY-----[A-Za-z0-9/\\+=\\s]*-----END PUBLIC KEY-----$"
  currencies:
    type: "object"
    required:
    - "currency"
    - "currency_space"
    - "stewards"
    properties:
      currency:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      currency_space:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      stewards:
        type: "array"
        items:
          $ref: "#/definitions/users"
  spaces:
    type: "object"
    required:
    - "space"
    - "stewards"
    properties:
      space:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      parent_space:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      stewards:
        type: "array"
        items:
          $ref: "#/definitions/users"
  journals:
    type: "object"
    required:
    - "amount"
    - "currency"
    - "currency_space"
    - "from_account"
    - "from_account_space"
    - "timestamp"
    - "to_account"
    - "to_account_space"
    properties:
      to_account:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      to_account_space:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      from_account:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      from_account_space:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      currency:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\-\\_]*$"
      currency_space:
        type: "string"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      amount:
        type: "number"
        format: "double"
        minimum: 0.0
      timestamp:
        type: "string"
        format: "date-time"
  application_request:
    type: "object"
    required:
    - "application_name"
    - "authorization_callback_uri"
    - "homepage_uri"
    properties:
      application_name:
        type: "string"
        description: "Applications Name"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\-\\_\\+ ]*$"
      homepage_uri:
        type: "string"
        description: "Applications home page"
        maxLength: 512
        pattern: "^((https?:)(\\/\\/\\/?)([\\w]*(?::[\\w]*)?@)?([\\d\\w\\.-]+)(?::(\\\
          d+))?)?([\\/\\\\\\w\\.()-]*)?(?:([?][^#]*)?(#.*)?)*"
      application_description:
        type: "string"
        description: "Application Description"
        maxLength: 1048
      authorization_callback_uri:
        type: "string"
        description: "Callback url after authorization."
        maxLength: 512
        pattern: "^((https?:)(\\/\\/\\/?)([\\w]*(?::[\\w]*)?@)?([\\d\\w\\.-]+)(?::(\\\
          d+))?)?([\\/\\\\\\w\\.()-]*)?(?:([?][^#]*)?(#.*)?)*"
  application_response:
    type: "object"
    required:
    - "application_id"
    - "application_secret"
    properties:
      application_id:
        type: "string"
        format: "password"
        minLength: 266
        maxLength: 800
        pattern: "^-----BEGIN PUBLIC KEY-----[A-Za-z0-9/\\+=\\s]*-----END PUBLIC KEY-----$"
      application_secret:
        type: "string"
        format: "password"
        minLength: 893
        maxLength: 899
        pattern: "^-----BEGIN PRIVATE KEY-----[A-Za-z0-9/+]{845,848}[=]{0,3}-----END\
          \ PRIVATE KEY-----$"
  authorize_request:
    type: "object"
    required:
    - "cors_token"
    - "publicKey"
    properties:
      publicKey:
        type: "string"
        description: "Users public key"
        minLength: 266
        maxLength: 800
        pattern: "^-----BEGIN PUBLIC KEY-----[A-Za-z0-9/\\+=\\s]*-----END PUBLIC KEY-----$"
      cors_token:
        type: "string"
        description: "An unguessable random string. It is used to protect against\
          \ cross-site request forgery attacks."
        minLength: 20
        maxLength: 255
        pattern: "^[A-Za-z0-9]*$"
  authorize_response:
    type: "object"
    required:
    - "challenge_token"
    - "cors_token"
    properties:
      challenge_token:
        type: "string"
        description: "An unguessable random string encoded using users public key."
        minLength: 86
        maxLength: 255
        pattern: "^[A-Za-z0-9]*$"
      cors_token:
        type: "string"
        format: "password"
        description: "An unguessable random string sent in the request. If it does\
          \ not match request cors_token the response should be thrown away and error\
          \ reported."
        minLength: 20
        maxLength: 255
        pattern: "^[A-Za-z0-9]*$"
  access_token_request:
    type: "object"
    required:
    - "cors_token"
    - "proof_token"
    - "publicKey"
    properties:
      publicKey:
        type: "string"
        description: "Users Public Key"
        minLength: 266
        maxLength: 800
        pattern: "^-----BEGIN PUBLIC KEY-----[A-Za-z0-9/\\+=\\s]*-----END PUBLIC KEY-----$"
      proof_token:
        type: "string"
        description: "Challenge Token decrypted using users private key"
        minLength: 128
        maxLength: 512
        pattern: "^[A-Za-z0-9]*$"
      cors_token:
        type: "string"
        description: "Cross site forgery token"
        minLength: 20
        maxLength: 255
        pattern: "^[A-Za-z0-9]*$"
  access_token_response:
    type: "object"
    required:
    - "access_token"
    - "access_token_expiry"
    - "scope"
    - "token_type"
    properties:
      access_token:
        type: "string"
        description: "This is the access token used to authenticate successive requests\
          \ by being placed in the header."
        minLength: 64
        maxLength: 256
        pattern: "^[A-Za-z0-9]*$"
      access_token_expiry:
        type: "integer"
        format: "int64"
        description: "time in milliseconds since epoch when token expires."
        minimum: 1448727080024
      scope:
        type: "array"
        items:
          type: "string"
          minLength: 5
          maxLength: 32
      token_type:
        type: "string"
        maxLength: 64
  register_response:
    type: "object"
    required:
    - "accounts"
    - "currencies"
    - "spaces"
    - "users"
    properties:
      users:
        $ref: "#/definitions/users_get"
      accounts:
        $ref: "#/definitions/accounts_get"
      currencies:
        $ref: "#/definitions/currencies_get"
      spaces:
        $ref: "#/definitions/spaces_get"
  register_request:
    type: "object"
    required:
    - "publicKey"
    - "username"
    properties:
      username:
        type: "string"
        description: "Username"
        maxLength: 255
        pattern: "^[A-Za-z0-9\\.\\-\\_]*$"
      publicKey:
        type: "string"
        description: "Users 4096bit RSA public key stripped of newlines. command:\
          \ openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:4096\
          \ ,openssl rsa -pubout -in private_key.pem -out public_key.pem , you can\
          \ deterministically generate an RSA key from a passphrase http://crypto.stackexchange.com/questions/24514/deterministically-generate-a-rsa-public-private-key-pair-from-a-passphrase-with"
        minLength: 266
        maxLength: 800
        pattern: "^-----BEGIN PUBLIC KEY-----[A-Za-z0-9/\\+=\\s]*-----END PUBLIC KEY-----$"
      email:
        type: "string"
        format: "email"
        description: "Users email address"
        maxLength: 255
        pattern: "^([\\w-]+(?:\\.[\\w-]+)*)@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\\
          .[a-z]{2})?)$"
      email_notifications:
        type: "boolean"
        description: "Does user wish to receive email notifications"
  ErrorModel:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  options:
    type: "string"
